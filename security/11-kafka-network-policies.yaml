apiVersion: kafka.strimzi.io/v1alpha1
kind: Kafka
metadata:
  name: my-cluster
  labels:
    app: my-cluster
spec:
  kafka:
    replicas: 3
    resources:
      requests:
        memory: 2Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: "1"
    jvmOptions:
      -Xms: 1024m
      -Xmx: 1024m
      gcLoggingEnabled: false
    listeners:
      plain:
        networkPolicyPeers:
          - podSelector:
              matchLabels:
                app: kafka-consumer
          - podSelector:
              matchLabels:
                app: kafka-producer
        authentication:
          type: oauth
          validIssuerUri: https://sso.myproject.svc:8443/auth/realms/internal
          jwksEndpointUri: https://sso.myproject.svc:8443/auth/realms/internal/protocol/openid-connect/certs
          userNameClaim: preferred_username
          tlsTrustedCertificates:
            - secretName: sso-x509-https-secret
              certificate: tls.crt
      tls:
        networkPolicyPeers:
          - podSelector:
              matchLabels:
                app: kafka-consumer
          - podSelector:
              matchLabels:
                app: kafka-producer
        authentication:
          type: oauth
          validIssuerUri: https://sso.myproject.svc:8443/auth/realms/internal
          jwksEndpointUri: https://sso.myproject.svc:8443/auth/realms/internal/protocol/openid-connect/certs
#          introspectionEndpointUri: https://sso.myproject.svc:8443/auth/realms/internal/protocol/openid-connect/token/introspect
#          clientId: kafka-broker
#          clientSecret:
#            secretName: my-cluster-oauth
#            key: clientSecret
          userNameClaim: preferred_username
          tlsTrustedCertificates:
            - secretName: sso-x509-https-secret
              certificate: tls.crt
      external:
        type: route
        configuration:
          brokerCertChainAndKey:
            secretName: custom-cert-external
            certificate: tls.crt
            key: tls.key
        authentication:
          type: oauth
          validIssuerUri: https://sso-myproject.apps.jscholz.rhmw-integrations.net/auth/realms/external
          jwksEndpointUri: https://sso-myproject.apps.jscholz.rhmw-integrations.net/auth/realms/external/protocol/openid-connect/certs
          userNameClaim: preferred_username
          tlsTrustedCertificates:
            - secretName: ingress-operator-crt
              certificate: ingress-operator.crt
          disableTlsHostnameVerification: true
    authorization:
      type: simple
      superUsers:
        - CN=my-connect
        - my-connect
        - CN=my-bridge
        - my-bridge
        - service-account-kafka-connect
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
    storage:
      type: ephemeral
    logging:
      type: inline
      loggers:
        log4j.logger.kafka: INFO
        log4j.logger.org.apache.kafka: INFO
        kafka.root.logger.level: INFO
        log4j.logger.io.strimzi.kafka.oauth: DEBUG
        log4j.logger.kafka.authorizer.logger: INFO
        log4j.logger.kafka.network.Acceptor: INFO
  zookeeper:
    replicas: 3
    resources:
      requests:
        memory: 1Gi
        cpu: "0.3"
      limits:
        memory: 1Gi
        cpu: "0.5"
    jvmOptions:
      gcLoggingEnabled: false
    storage:
      type: ephemeral
  entityOperator:
    topicOperator:
      resources:
        requests:
          memory: 256Mi
          cpu: "0.1"
        limits:
          memory: 256Mi
          cpu: "0.5"
      logging:
        loggers:
          rootLogger.level: INFO
        type: inline
      jvmOptions:
        gcLoggingEnabled: false
    userOperator:
      resources:
        requests:
          memory: 256Mi
          cpu: "0.1"
        limits:
          memory: 256Mi
          cpu: "0.5"
      logging:
        loggers:
          rootLogger.level: INFO
        type: inline
      jvmOptions:
        gcLoggingEnabled: false
---

apiVersion: v1
kind: Secret
metadata:
  name: my-cluster-oauth
type: Opaque
data:
  clientSecret: a2Fma2EtYnJva2VyLXNlY3JldA==
